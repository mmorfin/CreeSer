using System;
using System.Collections.Generic;
using System.ServiceModel;
using System.Threading;
using System.Web;
using System.Collections.Specialized;
using System.IO;

/// <summary>
/// Summary description for Utils
/// </summary>
public static class Utils
{
    public static string getPath(string noProveedor, string serieFolio, DateTime fechaDoc, bool temp, NameValueCollection appSettings)
    {
        string path = temp ? appSettings["tempPath"] : appSettings["facturasPath"];

        path = path.Replace("{NO_PROV}", noProveedor);
        path = path.Replace("{SERIE_FOLIO}", serieFolio);
        path = path.Replace("{YEAR}", fechaDoc.Year.ToString("0000"));
        path = path.Replace("{MONTH}", fechaDoc.Month.ToString("00"));

        return path;
    }

    public static void deleteDirectory(string tempDirectory, HttpServerUtility server)
    {
        try
        {
            //if (Directory.Exists(server.MapPath(tempDirectory)))
            if (Directory.Exists(tempDirectory))
            {
                //Directory.Delete(server.MapPath(tempDirectory), true);
                Directory.Delete(tempDirectory, true);
            }

        }
        catch (IOException ex)
        {
            throw ex;
        }
    }

    public static void makeDirectoryIfNotExists(string NewDirectory, HttpServerUtility server)
    {
        try
        {
            //if (!Directory.Exists(NewDirectory))
            {
                //Directory.CreateDirectory(server.MapPath(NewDirectory));
                Directory.CreateDirectory(NewDirectory);
            }

        }
        catch (IOException ex)
        {
            throw ex;
        }
    }

    public static void CopyAll(DirectoryInfo source, DirectoryInfo target)
    {
        // Check if the target directory exists, if not, create it.
        if (Directory.Exists(target.FullName) == false)
        {
            Directory.CreateDirectory(target.FullName);
        }

        // Copy each file into it’s new directory.
        foreach (FileInfo fi in source.GetFiles())
        {
            fi.CopyTo(Path.Combine(target.ToString(), fi.Name), true);
        }

        /*// Copy each subdirectory using recursion.
        foreach (DirectoryInfo diSourceSubDir in source.GetDirectories())
        {
            DirectoryInfo nextTargetSubDir =
                target.CreateSubdirectory(diSourceSubDir.Name);
            CopyAll(diSourceSubDir, nextTargetSubDir);
        }*/
    }

    public static void CopyFiles(DirectoryInfo source, DirectoryInfo target, List<string> fileNames)
    {
        // Check if the target directory exists, if not, create it.
        if (Directory.Exists(target.FullName) == false)
        {
            Directory.CreateDirectory(target.FullName);
        }

        // Copy each file into it’s new directory.
        foreach (FileInfo fi in source.GetFiles())
        {
            if (fileNames.Contains(fi.Name))
            {
                fi.CopyTo(Path.Combine(target.ToString(), fi.Name), true);
            }
        }

        /*// Copy each subdirectory using recursion.
        foreach (DirectoryInfo diSourceSubDir in source.GetDirectories())
        {
            DirectoryInfo nextTargetSubDir =
                target.CreateSubdirectory(diSourceSubDir.Name);
            CopyAll(diSourceSubDir, nextTargetSubDir);
        }*/
    }

    public static void deleteFiles(string directory)
    {
        DirectoryInfo source = new DirectoryInfo(directory);
        foreach (FileInfo fileInfo in source.GetFiles())
        {
            fileInfo.Delete();
        }
    }

    public static bool isValid(System.Xml.XmlDocument myDoc, int currentTry, NameValueCollection appSettings, out string msgError)
    {
        bool retValue = false;
        msgError = string.Empty;
        int maxTries, sleepEntreIntentos;
        if (!int.TryParse(appSettings["numIntentosWS"], out maxTries))
            maxTries = 3;
        if (!int.TryParse(appSettings["timeoutEntreIntentos"], out sleepEntreIntentos))
            sleepEntreIntentos = 10000;
        try
        {
            ValidaServiceReference.ValidadorSoapClient client = new ValidaServiceReference.ValidadorSoapClient();
            string ret = client.ValidarFactura(myDoc.InnerXml, "95EEF218-20F0-4DF0-84C1-88D89C6B38B4", string.Empty);
            if (ret.StartsWith("(100)"))
            {
                retValue = true;
            }
            else
            {
                msgError = ret;
            }
        }
        catch (EndpointNotFoundException ex)
        {
            msgError = "Por el momento no fue posible validar su factura, intente más tarde";
            if (currentTry > 0 && currentTry <= maxTries)
            {
                Thread.Sleep(sleepEntreIntentos);
                retValue = isValid(myDoc, ++currentTry, appSettings, out msgError);
            }
        }
        catch (Exception ex)
        {
            msgError = "Por el momento no fue posible validar su factura, intente más tarde";
        }
        return retValue;
    }

    
}